/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useEffect } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh
    Button: THREE.SkinnedMesh
    Button2: THREE.SkinnedMesh
    Duck_eyes: THREE.SkinnedMesh
    Ears: THREE.SkinnedMesh
    Head: THREE.SkinnedMesh
    Hoodie: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
    Neck: THREE.SkinnedMesh
    nose: THREE.SkinnedMesh
    Pants: THREE.SkinnedMesh
    peak: THREE.SkinnedMesh
    Shoes: THREE.SkinnedMesh
  }
  materials: {
    Skin: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
  }
}

// type ActionName = 'wave' | 'swim' | 'idle' | 'walk' | 'look' | 'jump'
// type GLTFActions = Record<ActionName, THREE.AnimationAction>

type tDuckProps = {
  innerRef?: any,
  setActions?: (actions: any) => void,
} & JSX.IntrinsicElements['group']

function Duck({ innerRef, setActions, ...props }: tDuckProps) {
  const { animations, materials, nodes } = useGLTF('/duck.glb') as GLTFResult
  const { actions } = useAnimations(animations, innerRef)

  useEffect(() => {
    if (setActions) {
      setActions(actions)
    }
  }, [actions, setActions])

  return (
    <group ref={innerRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="Duck" rotation={[Math.PI / 2, 0, 0]} scale={0.005}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Body" geometry={nodes.Body.geometry} material={materials.Skin} skeleton={nodes.Body.skeleton} />
          <skinnedMesh name="Button" geometry={nodes.Button.geometry} material={materials['Material.002']} skeleton={nodes.Button.skeleton} />
          <skinnedMesh name="Button2" geometry={nodes.Button2.geometry} material={materials['Material.002']} skeleton={nodes.Button2.skeleton} />
          <skinnedMesh name="Duck_eyes" geometry={nodes.Duck_eyes.geometry} material={materials['Material.004']} skeleton={nodes.Duck_eyes.skeleton} />
          <skinnedMesh name="Ears" geometry={nodes.Ears.geometry} material={materials.Skin} skeleton={nodes.Ears.skeleton} />
          <skinnedMesh name="Head" geometry={nodes.Head.geometry} material={materials.Skin} skeleton={nodes.Head.skeleton} />
          <skinnedMesh name="Hoodie" geometry={nodes.Hoodie.geometry} material={materials['Material.001']} skeleton={nodes.Hoodie.skeleton} />
          <skinnedMesh name="Neck" geometry={nodes.Neck.geometry} material={nodes.Neck.material} skeleton={nodes.Neck.skeleton} />
          <skinnedMesh name="nose" geometry={nodes.nose.geometry} material={materials['Material.003']} skeleton={nodes.nose.skeleton} />
          <skinnedMesh name="Pants" geometry={nodes.Pants.geometry} material={materials['Material.002']} skeleton={nodes.Pants.skeleton} />
          <skinnedMesh name="peak" geometry={nodes.peak.geometry} material={materials['Material.002']} skeleton={nodes.peak.skeleton} />
          <skinnedMesh name="Shoes" geometry={nodes.Shoes.geometry} material={materials['Material.002']} skeleton={nodes.Shoes.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/duck.glb')

export default Duck;
