/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { useStore } from '@zustand/store'

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh
    Button: THREE.SkinnedMesh
    Button2: THREE.SkinnedMesh
    Duck_eyes: THREE.SkinnedMesh
    Ears: THREE.SkinnedMesh
    Head: THREE.SkinnedMesh
    Hoodie: THREE.SkinnedMesh
    Neck: THREE.SkinnedMesh
    nose: THREE.SkinnedMesh
    Pants: THREE.SkinnedMesh
    peak: THREE.SkinnedMesh
    Shoes: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    Skin: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
  }
}

type ActionName = 'wave' | 'swim' | 'idle' | 'walk' | 'look' | 'jump'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

function Duck(props: JSX.IntrinsicElements['group']) {
  const { forward, backward, left, right } = useStore((state) => state)

  const duckRef = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/duck.glb') as GLTFResult
  const { actions } = useAnimations(animations, duckRef)

  useEffect(() => {
    if (actions.walk && actions.idle && (forward || backward || left || right)) {
      actions.idle.stop();
      actions.walk.play();
    } else if (actions.walk && actions.idle) {
      actions.idle.play();
      actions.walk.stop();
    }
  }, [forward, backward, left, right])

  useFrame(() => {
    const quaternion = new THREE.Quaternion();
    let angle = 0;
    if (forward) {
      angle = Math.PI;
      if (left) {
        angle = Math.PI * 1.25;
      } else if (right) {
        angle = Math.PI * 0.75;
      }
    } else if (backward) {
      angle = 0;
      if (left) {
        angle = Math.PI * 1.75;
      } else if (right) {
        angle = Math.PI * 0.25;
      }
    } else if (left) {
      angle = Math.PI * 1.5;
    } else if (right) {
      angle = Math.PI * 0.5;
    }
    quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), angle);
    duckRef.current.quaternion.rotateTowards(quaternion, 0.1)
  })

  return (
    <group ref={duckRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="Duck" rotation={[Math.PI / 2, 0, 0]} scale={0.005}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Body" geometry={nodes.Body.geometry} material={materials.Skin} skeleton={nodes.Body.skeleton} />
          <skinnedMesh name="Button" geometry={nodes.Button.geometry} material={materials['Material.002']} skeleton={nodes.Button.skeleton} />
          <skinnedMesh name="Button2" geometry={nodes.Button2.geometry} material={materials['Material.002']} skeleton={nodes.Button2.skeleton} />
          <skinnedMesh name="Duck_eyes" geometry={nodes.Duck_eyes.geometry} material={materials['Material.004']} skeleton={nodes.Duck_eyes.skeleton} />
          <skinnedMesh name="Ears" geometry={nodes.Ears.geometry} material={materials.Skin} skeleton={nodes.Ears.skeleton} />
          <skinnedMesh name="Head" geometry={nodes.Head.geometry} material={materials.Skin} skeleton={nodes.Head.skeleton} />
          <skinnedMesh name="Hoodie" geometry={nodes.Hoodie.geometry} material={materials['Material.001']} skeleton={nodes.Hoodie.skeleton} />
          <skinnedMesh name="Neck" geometry={nodes.Neck.geometry} material={nodes.Neck.material} skeleton={nodes.Neck.skeleton} />
          <skinnedMesh name="nose" geometry={nodes.nose.geometry} material={materials['Material.003']} skeleton={nodes.nose.skeleton} />
          <skinnedMesh name="Pants" geometry={nodes.Pants.geometry} material={materials['Material.002']} skeleton={nodes.Pants.skeleton} />
          <skinnedMesh name="peak" geometry={nodes.peak.geometry} material={materials['Material.002']} skeleton={nodes.peak.skeleton} />
          <skinnedMesh name="Shoes" geometry={nodes.Shoes.geometry} material={materials['Material.002']} skeleton={nodes.Shoes.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/duck.glb')

export default Duck;